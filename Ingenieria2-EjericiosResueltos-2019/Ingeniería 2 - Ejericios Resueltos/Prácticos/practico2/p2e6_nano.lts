const Max_seq = 1
range B = 0..Max_seq
set Frame = {paquete}

TRANSMISOR = RECIBO_DE_C_RED[0],
	RECIBO_DE_C_RED[nfts:B] = ( fnl[data_out:Frame] -> ENVIO_A_C_FISICA[nfts][data_out]),  
	ENVIO_A_C_FISICA[nfts:B][data_out:Frame] = ( tpl[nfts][data_out] -> start_timer[nfts][data_out] -> 
															(	timeout -> ENVIO_A_C_FISICA[nfts][data_out] 
															|  	fpl[ack:B] -> CHECK[ack][nfts][data_out]
															)	 
												),
	CHECK[ack:B][nfts:B][data_out:Frame] = ( when(ack != nfts) retransmision -> ENVIO_A_C_FISICA[nfts][data_out]
											| when(ack == nfts) siguiente_trama -> RECIBO_DE_C_RED[(nfts + 1) % (Max_seq+1)]
											). 

RECEPTOR = RECIBO_DE_C_FISICA[0],
	RECIBO_DE_C_FISICA[fe:B] = ( fpl[seq:B][data_in:Frame] -> CHECK[fe][seq][data_in] ),
													
	CHECK[fe:B][seq:B][data_in:Frame] = ( when(seq != fe) secuencia_invalida -> ENVIO_DE_RECEPCION[fe] 
									| when (seq == fe) tnl[data_in] -> ENVIO_DE_RECEPCION[(fe +1)%(Max_seq+1)]
									),
	ENVIO_DE_RECEPCION[fe:B] = ( tpl[(1-fe)%(Max_seq+1)] -> RECIBO_DE_C_FISICA[fe] ).



CHANEL_IDA = (put_frame[nfts:B][data_out:Frame] -> PUT[nfts][data_out]),
	PUT[nfts:B][data_out:Frame] = ( put_frame[nfts][data_out] -> PUT[nfts][data_out]
									//Seteo ntfsBis para simular que llegan secuencias equivocadas al receptor
								|  get_frame[nftsBis:B][data_out] -> CHANEL_IDA 
								).

CHANEL_VUELTA = (put_ack[ack:B] -> PUT[ack]),
	PUT[ack:B] = ( put_ack[ack] -> PUT[ack]
				|  get_ack[ack] -> CHANEL_VUELTA
				).




|| PAR = (trans:TRANSMISOR || recep:RECEPTOR || CHANEL_IDA || CHANEL_VUELTA)
		/{
			trans.start_timer[nfts:B][data_out:Frame]/put_frame[nfts][data_out],
			recep.fpl[seq:B][data_in:Frame]/get_frame[seq][data_in],
			recep.tpl[fe:B]/put_ack[fe],
			trans.fpl[ack:B]/ get_ack[ack]
		}.
