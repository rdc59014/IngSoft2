// SIN tener cuenta el orden de llegada de mensajes al buffer

const N = 5 // Limite de buuffer
range  R = 0..N


BUFF = BUFF[0],
	BUFF[i:R] = ( when(i < N) poner -> BUFF[i+1]
				| when (i > 0) sacar -> BUFF[i-1]
				).


PRODUCTOR = (enviar -> PRODUCTOR).
CONSUMIDOR = (recibir -> CONSUMIDOR).

||C = (PRODUCTOR || CONSUMIDOR || BUFF)
		/{
			enviar/poner,
			recibir/sacar
		}.


// Buffer FIFO

set S = {msj1,msj2,msj3,msj4,msj5,msj6,msj7}

PRODUCTOR_2 = (enviar[m:S] -> PRODUCTOR_2).
CONSUMIDOR_2 = (recibir[m:S] -> CONSUMIDOR_2).

BUFF_2 = (poner[m:S] -> BUFF_2[m]),  
	BUFF_2[m:S] =( poner[h:S] ->  BUFF_2[h][m]
					| sacar[m] -> BUFF_2	 
					),
	BUFF_2[h:S][m:S] = ( poner[t:S] -> BUFF_2[t][h][m] 
						|	sacar[m] -> BUFF_2[h]
						), 
	BUFF_2[t:S][h:S][m:S] = ( poner[f:S] -> BUFF_2[f][t][h][m] 
							| sacar[m] -> BUFF_2[t][h]
								), 
	BUFF_2[f:S][t:S][h:S][m:S] = ( poner[x:S] -> BUFF_2[x][f][t][h][m] 
							| sacar[m] -> BUFF_2[f][t][h]
							),
	BUFF_2[x:S][f:S][t:S][h:S][m:S] = (sacar[m] -> BUFF_2[x][f][t][h]
		).

||C2 = (PRODUCTOR_2 || CONSUMIDOR_2 || BUFF_2)
			/{
				enviar[m:S] / poner[m],
				recibir[m:S] / sacar[m]
			}.

	















